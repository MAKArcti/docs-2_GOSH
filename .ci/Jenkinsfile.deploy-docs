pipeline {
    triggers {
       githubPush()
    }
    agent {
        node {
            label 'jenkins-main'
        }
    }
    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'main', name: 'sha1', type: 'PT_BRANCH', quickFilterEnabled: true
    }
    stages {
        stage('Docs: deploy') {
            steps {
                if (env.ghprbPullLink) {
                    env.COMMIT = env.ghprbSourceBranch
                } else {
                    env.COMMIT = params.sha1
                }
                echo "${COMMIT}"
                git branch: "${env.COMMIT}", url: 'https://github.com/gosh-sh/docs.git'
                checkout scm
                script {
                    env.BUCKET_NAME = 'docs-gosh'
                    dir('site') {
                        def status = sh(script: "aws s3api head-bucket --bucket ${BUCKET_NAME}", returnStatus: true)
                        if (status == 0) {
                            echo 'Bucket already exists! Just syncing.'
                            sh "aws s3 sync . s3://${BUCKET_NAME}"
                        } else {
                            sh """
                                aws s3api create-bucket --bucket ${BUCKET_NAME} --region eu-west-2 --acl public-read --create-bucket-configuration LocationConstraint=eu-west-2
                                aws s3 website s3://${BUCKET_NAME} --index-document index.html --error-document index.html
                                sed 's/BUCKET_NAME/${BUCKET_NAME}/g' ../.ci/s3/policy.json.template > policy.json
                                aws s3api put-bucket-policy --bucket ${BUCKET_NAME} --policy file://policy.json
                                aws s3 sync . s3://${BUCKET_NAME}
                                sed "s/BUCKET_NAME/\$BUCKET_NAME/g" ../.ci/nginx/proxy.s3.conf.template >> /opt/nginx/s3-proxy.conf
                            """
                        }
                    }
                    timeout(15) {
                        waitUntil {
                            def r = sh script: "sleep 10 && curl -s --retry-connrefused --retry 100 --retry-delay 5 https://docs.gosh.sh > /dev/null", returnStatus: true
                            return r == 0
                        }
                    }
                }
            }
            post {
                always {
                    cleanWs()
                }
            }
        }
    }
}
