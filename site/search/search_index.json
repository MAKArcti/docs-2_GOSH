{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Git Open Source Hodler","text":"<p>(Yes, it's Hodler).</p> <p>GOSH is a blockchain built around securing the software supply chain and capturing the immense value in open source projects. This is achieved through record-setting blockchain tech, distributed programming, and a decentralized architecture - integrated into the same familiar git, meaning there is no change to the workflow.</p>"},{"location":"#motivation","title":"Motivation","text":"<p>The Software Supply Chain is a high-impact area. Yet there exists a distinctive lack of secure, trustless, verifiable, and transparent delivery of source code/binaries to developers and users in all software fields. Storing your code on a git means it has an owner, a single point of control, which leads to security vulnerabilities. Currently there is no industrial solution available that is not centralized and thus not dependent on the decisions of a few actors. The main way in which GOSH solves this issue is through allowing developers to build consensus around their code, so the more code is written, the more secure it becomes.</p>"},{"location":"#objective","title":"Objective","text":"<p>To create a truly decentralized development environment so that open source repositories can be run, governed, and monetized collectively. All the while, mitigating security and transparency issues arising from a conventional software supply chain.</p>"},{"location":"#architecture","title":"Architecture","text":"<ol> <li>Build a scalable multithreaded, multisharded content addressable blockchain</li> <li>Implement Git using smart contracts</li> <li>Implement DAO on top of that Git to allow building consensus around the code</li> <li>Formally verify the smart contracts</li> <li>Represent all entities by hashes (container images, git commits, blubs, pull requests etc.);</li> <li>Allow anyone to add some metadata with signature to any entity;</li> <li>Allow anyone to decide whose metadata to trust;</li> <li>Build chain/tree of trust: dependencies can be organized using the same architecture, and containers built</li> </ol>"},{"location":"#instruments-and-utilities","title":"Instruments and utilities","text":"<p>A variety of utility tools to assist with all the aspects of the solution are under active development. Explore the tools available now to get started with GOSH:</p> <ul> <li>create and manage your on-chain repositories through GOSH Web or directly in the Docker Extension</li> <li>work with on-chain repository as if you use a regular git repository with Git Remote Helper</li> </ul>"},{"location":"links/","title":"Links","text":"<p>GOSH website</p> <p>GOSH Web App</p> <p>GOSH Blockchain Explorer</p> <p>GOSH repository</p>"},{"location":"on-chain-architecture/gosh-smart-contracts/","title":"GOSH smart contracts","text":"<p>GOSH is open-source and freely available on GitHub and, obviously, on GOSH.</p> <p>GOSH consists of the following contracts:</p> <ul> <li>VersionController - contract version manager</li> <li>SystemContract - main contract for a specific version</li> <li>Profile - User Profile \u0441ontract</li> <li>ProfileIndex - Contract for each user's public key</li> <li>ProfilDao - Dao Profile \u0441ontract</li> <li>GOSHWallet - GOSH user wallet, used for all user interactions with GOSH</li> <li>GOSHDAO - contract storing organization object</li> <li>Repository - contract storing repository object</li> <li>Commit - contract storing commit object</li> <li>Tree - contract storing tree object</li> <li>Diff - contract storing diff object</li> <li>Snapshot - contract storing snapshot object</li> <li>Tag - contract storing tag object</li> </ul>"},{"location":"on-chain-architecture/gosh-wallet/","title":"GOSH Wallet","text":"<p>GOSH exists on-chain as a system of interconnected smart contracts. Every repository, every file and commit are smart contracts, where data is written to the blockchain.</p> <p>Writing data to the blockchain requires cryptographic signatures and fees.</p> <p>For this reason every GOSH user needs to have a wallet and a pair of cryptographic keys.</p> <p>GOSH wallets are specially written to facilitate open-source development - following certain rules  the GOSH blockchain giver will fund all actions in an open-source repository, and development will be free.</p> <p>Refer to GOSH Web or Docker Extension sections to find out how to create your wallet and get started with GOSH, depending on where you're coming to GOSH from.</p>"},{"location":"on-chain-architecture/organizations-gosh-dao-and-smv/","title":"Organizations: GOSH DAO and SMV","text":""},{"location":"on-chain-architecture/organizations-gosh-dao-and-smv/#dao","title":"DAO","text":"<p>As a blockchain-based product, GOSH is all about decentralization.</p> <p>The primary entity on GOSH is a Decentralized Autonomous Organization - DAO.</p> <p>At a minimum, organizations have one member, who signle-handedly creates and manages repositories.</p> <p>Once more than one user is added to an Organization, however, decentralized management of repositories begins.</p> <p>DAO can be configured to require a vote of members for any action within the repository.</p> <p>For example, a user may propose a commit to DAO, and a soft-majority vote of all other DAO members may be required to approve it.</p> <p>Repositories could be Locked to resuire any changes to them to be voted by DAO SMV.</p> <p>DAO configuration is very flexible. Voting requirements may be set (or not) for any action, from adding new members to DAO to merging a commit.</p>"},{"location":"on-chain-architecture/organizations-gosh-dao-and-smv/#soft-majority-voting","title":"Soft Majority Voting","text":"<p>Soft Majority Voting, or SMV for short, is a voting mechanism designed for transparency and optional participation.</p> <p>The outcome of SMV depends on the difference between the number of votes for and against a proposal, with a minimal threshold of approving votes required to pass a proposal no one objects to.</p> <p>If everyone votes either for or against a proposal, 50% + 1 vote is required for the proposal to pass.</p> <p>If the only votes given are for the proposal, and no one votes against, 10% approving votes are enough for the proposal to pass.</p> <p>Everything in between these two extremes is a linear dependency between the percentage of votes against and percentage of votes for required to pass the proposal.</p> <p>For important decisions a more strict super majority approval criteria may be set up.</p> <p></p> <p>All SMV proposals have a set deadline. When it is reached, accumulated votes are counted, the decision is made, and the proposal completes.</p> <p>If however a majority of 50% + 1 vote is achieved early, the proposal completes immediately.</p>"},{"location":"on-chain-architecture/organizations-gosh-dao-and-smv/#smv-in-gosh","title":"SMV in GOSH","text":"<p>In GOSH one vote is one token on the user's GOSH wallet. Each user gets 100 tokens by default. The total supply of tokens in the repository is the sum of all tokens of all its participants.</p> <p>This way, for a proposal in GOSH to pass early several participants need to vote for it with 50% of the total token supply of the repository + 1 token.</p> <p>If no one objects to a proposal for the duration of its voting period, 10% of the total supply of tokens is enough, but the proposal will only complete at the end of the voting period.</p> <p>If votes are split, and neither side achieves 50% + 1 token early, the proposal completes at the end of the voting period and the result is calculated according to the diagram above.</p>"},{"location":"working-with-gosh/build-and-sign-images/","title":"Build and Sign Images","text":"<p>With the Help of a custom Buildkit, you can build your Docker images directly from GOSH, and sign them so they can be verified by the GOSH docker extension.</p> <p>Instead of a dockerfile, this Buildkit uses a special goshfile to ensure code is taken from GOSH.</p>"},{"location":"working-with-gosh/build-and-sign-images/#how-to-build-from-gosh","title":"How to build from GOSH","text":""},{"location":"working-with-gosh/build-and-sign-images/#1-setup-environment-variables-with-your-wallet","title":"1. Setup environment variables with your wallet","text":"<pre><code>export WALLET=...\nexport WALLET_PUBLIC=...\nexport WALLET_SECRET=...\n</code></pre> <p>You received these when creating your account in GOSH Web or Docker Extension.</p>"},{"location":"working-with-gosh/build-and-sign-images/#2-create-goshfileyaml-this-specification-is-a-work-in-progress-and-subject-to-change","title":"2. Create <code>goshfile.yaml</code> (this specification is a work in progress and subject to change)","text":"<pre><code># syntax=teamgosh/goshfile\n\napiVersion: 1\nimage: bash:latest\nsteps:\n  - name: print date\n    run:\n      command: [\"/usr/local/bin/bash\"]\n      args:\n        - -c\n        - &gt;-\n          (date +'%s %H:%M:%S %Z'; echo \"Hi there\") | tee /message.txt\n</code></pre>"},{"location":"working-with-gosh/build-and-sign-images/#3-now-to-build-an-image","title":"3. Now to build an image","text":"<pre><code>TARGET_IMAGE=\"my-target-super-image\"\n\ndocker buildx build \\\n    --push \\\n    --label WALLET_PUBLIC=\"$WALLET_PUBLIC\" \\\n    -f goshfile.yaml \\\n    -t \"$TARGET_IMAGE\" \\\n    .\n\n## OR more complicated way via buildctl directly\n# # run buildkitd containered\n# docker run -d --name buildkitd --privileged moby/buildkit:latest\n# # build image\n# buildctl --addr=docker-container://buildkitd build \\\n#         --frontend gateway.v0 \\\n#         --local dockerfile=. \\\n#         --local context=. \\\n#         --opt source=teamgosh/goshfile \\\n#         --opt filename=goshfile.yaml \\\n#         --opt wallet_public=\"$WALLET_PUBLIC\" \\\n#         --output type=image,name=\"$TARGET_IMAGE\",push=true\n</code></pre> <p>Here we parameterize the image build process with our wallet credentials.</p>"},{"location":"working-with-gosh/build-and-sign-images/#4-sign-the-image-wip-will-be-part-of-build-image-process","title":"4. Sign the image (WIP: will be part of build image process)","text":"<pre><code>docker pull $TARGET_IMAGE # buildkit push image directly to the registry and it doesn't persist locally\n\n# my-target-super-image's sha256\nTARGET_IMAGE_SHA=`docker inspect --format='{{index (split (index .RepoDigests 0) \"@\") 1}}' $TARGET_IMAGE`\n\ndocker run --rm teamgosh/sign-cli sign \\\n    -n &lt;blockchain_network e.g. https://gra01.net.everos.dev&gt; \\\n    -g $WALLET \\\n    -s $WALLET_SECRET \\\n    $WALLET_SECRET \\  # signer secret can be different\n    $TARGET_IMAGE_SHA\n</code></pre> <p>Now you have signed the image.</p>"},{"location":"working-with-gosh/build-and-sign-images/#you-can-check-the-image-signature-with-your-public-key","title":"You can check the image signature with your public key","text":"<pre><code>TARGET_IMAGE=\"my-target-super-image\"\n# or IMAGE_NAME=\"my_repo:5000/library/my-target-super-image:latest@sha256:...\"\n\nWALLET_PUBLIC=$(docker inspect --format='{{.Config.Labels.WALLET_PUBLIC}}' $TARGET_IMAGE)\n\nTARGET_IMAGE_SHA=$(docker inspect --format='{{index (split (index .RepoDigests 0) \"@\") 1}}' $TARGET_IMAGE)\n\ndocker run --rm teamgosh/sign-cli check \\\n    -n &lt;blockchain_network e.g. https://gra01.net.everos.dev&gt; \\\n    $WALLET_PUBLIC \\\n    $TARGET_IMAGE_SHA\n</code></pre> <p>NOTE: Anyone who has the image can validate it. The image has label WALLET_PUBLIC and image's sha256 also publicly available.</p> <p>Additionally, signer tool can deploy a proof contract to GOSH blockchain that will be publicly available to all wanting to verify the image they pull from dockerhub.</p>"},{"location":"working-with-gosh/build-and-sign-images/#examples","title":"Examples","text":"<p>Publisher example</p>"},{"location":"working-with-gosh/docker-extension/","title":"Docker Extension","text":"<p>GOSH Docker Extension implements GOSH repository management and image verification as the newest feature of Docker - a Docker Extension.</p> <p>You will be able to create your GOSH account and Decentralized Autonomous Organization (DAO), set up and manage repositories through a graphical interface directly in Docker Desktop. Repositories stored in GOSH can then be interacted with like any regular remote repository, with a few small configurations to git, making decentralized code management easily available to anyone.</p> <p>Images built directly from code stored in GOSH can be verified as GOSH-sourced in the Docker Extension, ensuring security of the software supply chain. You will always know what code specifically is running in your containers, and that none of it was tampered with during build.</p>"},{"location":"working-with-gosh/docker-extension/#installation","title":"Installation","text":"<p>Get the latest Docker Desktop (4.8.0 or later), which supports extensions.</p> <p>Launch the Desktop, go to the Extensions section, and click Add Extensions.</p> <p></p> <p>Select and install Gosh extension on the marketplace.</p>"},{"location":"working-with-gosh/docker-extension/#create-account","title":"Create account","text":"<p>Open the Gosh verified images extension in Docker Desktop.  If you have a Gosh account, then enter your own one seed phrase, if not, you can create it by clicking on the link app.gosh.sh.</p> <p></p> <p>To get started with GOSH, you need an active Github-account.</p> <p>Click Create account with Github.</p> <p></p> <p>After click Authorize gosh-sh</p> <p></p> <p>In the list of organizations received from Github, click on the organization</p> <p></p> <p>and select repositories for upload into Gosh</p> <p></p> <p>Do this for each organization for which you want to upload repositories to Gosh.</p> <p>Danger</p> <p>After registering on GOSH you will not be able to return to this step in this release.</p> <p>This will be available later</p> <p>Then click Upload</p> <p></p> <p>\u200bIf you are familiar with blockchain, you know what to do with a seed phrase.</p> <p>If you're new to blockchain, all you need to know, is that this is the key to your account and all your assets on GOSH. Your public key, which can identify you on the blockchain and the secret key you'll use to sign your actions can always be calculated from your seed phrase.</p> <p>To create the GOSH-account, the seed phrase will be generated for you.</p> <p></p> <p>Danger</p> <p>Write your seed phrase down and store it somewhere safe, and never share it with anyone. Avoid storing it in plain text or screenshots, or any other non-secure way. If you lose it, you lose access to your assets. Anyone who gets it, gets full access to your assets.</p> <p>Info</p> <p>Your seed phrase will be used to log into GOSH.</p> <p>Once you have written down your seed phrase, click Continue.</p> <p>Then choose a short nickname or create a new one and click Create account.</p> <p>Warning</p> <p>The Usernames must contain only Latin letters, numbers, hyphen, underscore character <code>( a...z, 0...9, -, _ )</code></p> <p></p> <p>Info</p> <p>When the repositories are uploaded, a notification will be sent to your email.</p> <p>Follow the link in the email. </p> <p>To log into Gosh open the Gosh verified images extension in Docker Desktop and enter the saved seed phrase and click Sign in.</p> <p></p> <p>GOSH will ask you to set up a PIN code:</p> <p></p> <p>And unlock with PIN code.</p> <p>Once done, you will be logged into GOSH.</p> <p>Info</p> <p>The GOSH DAO Bot will be a member of your organization. In the future, it will track changes in your repositories on Github and synchronize them with Gosh.</p> <p>The Bot can be removed from the DAO members by voting. But then there will be no automatic synchronization of repositories in GOSH if they have been changed in Github.</p>"},{"location":"working-with-gosh/docker-extension/#create-organization","title":"Create Organization","text":"<p>The Organizations page will open after your account is created.</p> <p>Click New organization button in the Organizations section.</p> <p></p> <p>\u200bInput Organization name and members.</p> <p>Warning</p> <p>The Organizations name must contain only Latin letters, numbers, hyphen, underscore character <code>( a...z, 0...9, -, _ )</code></p> <p>The first mandatory member is the creator, identified by their username.</p> <p>The second member is the GOSH DAO Bot. It will synchronize repositories with github on Gosh.</p> <p>Any other members can be added at creation - just enter the username of each member in new line.</p> <p>At any later time the list of members can be expanded by voting.</p> <p>Click Create organization.</p> <p></p> <p>\u200bOnce created, your organization will appear in the organization list. Click on it to continue.</p> <p></p>"},{"location":"working-with-gosh/docker-extension/#create-repository","title":"\u200bCreate Repository","text":"<p>To create a repository in your organization click Create in the Repositories section.</p> <p></p> <p>Enter repository name and click Create repository.</p> <p>Warning</p> <p>The repository name must contain only Latin letters, numbers, hyphen, underscore character <code>( a...z, 0...9, -, _ )</code></p> <p></p>"},{"location":"working-with-gosh/docker-extension/#create-branch","title":"Create Branch","text":"<p>Repository is created with default main branch. To create another branch, click on the branches counter.</p> <p></p> <p>Select the branch to be forked, enter new branch name, and click\u200b Create branch.</p> <p>Warning</p> <p>The branch name must contain only Latin letters, numbers, hyphen, underscore character <code>( a...z, 0...9, -, _ )</code></p> <p></p> <p>Once the branch is created, it will appear in the branches list.</p> <p></p> <p>Switch to it via drop down list.</p> <p></p>"},{"location":"working-with-gosh/docker-extension/#create-file","title":"Create File","text":"<p>To create file, click Add file button.</p> <p></p> <p>Enter file contents and name. MD syntax is supported for preview.</p> <p></p> <p>Once done, scroll down to Commit data, enter commit info and click Commit changes button.</p> <p></p> <p>Commit status will be displayed below.</p> <p></p> <p>If the branch you are working in requires no vote to commit to, the changes will be commited immediately/ Otherwise a DAO vote will be initiated.</p>"},{"location":"working-with-gosh/docker-extension/#create-pull-request","title":"Create Pull Request","text":"<p>Click on the Pull requests tab and set up the pull request: what branch to merge from and to.</p> <p></p> <p>View the diff, scroll down to Commit data, enter details and click Commit changes.</p> <p></p> <p>Info</p> <p>When merging into the main branch, and in some other cases (depending on DAO setup), a DAO proposal will be initiated by trying to commit.</p> <p>Organization Tokens have to be sent to the DAO Soft Majority Vote contract to start a proposal for DAO members to vote on.</p>"},{"location":"working-with-gosh/docker-extension/#voting-in-smv-soft-majority-vote","title":"Voting in SMV (Soft Majority Vote)","text":"<p>Actions that require a DAO vote, such as merging into main, are performed by creating a proposal.</p> <p>To create a proposal, or to vote for a proposal someone else created, some of your tokens need to be allocated to SMV (once the proposal is completed), you can get them back.</p> <p>For example, to merge into main, create a pull request from some other branch. A proposal will be generated and will appear on the Events page.</p> <p>The voting period is indicated on the proposal page. This is the time allotted for voting. Unless a decisive majority of &gt;50% is achieved early, votes will be counted at the end of this period.</p> <p>The thumbs up and down counters under Running status indicate how many tokens were used by now to vote for and against the proposal.</p> <p>The green indicator in the top right corner means that the SMV smart contracts are not currently processing any new votes. It turns red when the SMV contracts are busy.</p> <p>Once you have made a decision, vote for the proposal with your tokens. Vote registration can take a bit of time.</p> <p>Info</p> <p>As per the rules of Soft Majority Voting, to have a proposal approved early, you need at least 50% of the total supply of tokens in the repository + 1 token used to vote for the proposal.</p> <p>For example, in a repository with two members, where the total supply of tokens is 200, 101 token needs to be used to instantly approve a proposal. Thus with every member holding 100 tokens a proposal can never be instantly completed without the participation of members other than the proposal's author.</p> <p>On the other hand, so as not to depend on all members of an organization to vote, soft majority vote will complete with an approval at the end of the voting period, if 10% of the total token supply were used to vote for, and no one voted against.</p> <p>The more tokens are sent against the proposal, the higher the approving amount needs to be (up to 50% of the total supply  + 1 token) for the proposal to pass.</p> <p>Other members of the Organization, who have transferred their tokens to SMV, will be able to vote for the proposal on this page in their own accounts.</p> <p>Info</p> <p>Currently, even in organizations with a single member, voting still takes place when a proposal is created. 51 tokens are needed to approve a proposal in such a repository.</p> <p>Once a majority has been reached early, or the voting period ended and the soft majority vote result was decided, the proposal completes and the proposed action is performed.</p>"},{"location":"working-with-gosh/docker-extension/#view-public-key","title":"View Public Key","text":"<p>A user needs to know their public key, for example, when joining an organization.</p> <p>To view your public key go to the main page of your account and click Settings.</p>"},{"location":"working-with-gosh/docker-extension/#add-members-to-organization","title":"Add Members to Organization","text":"<p>Go to Organization menu - Participants. To add participants, click Add participant button, enter new participant public key and click Save changes.</p> <p></p>"},{"location":"working-with-gosh/docker-extension/#whats-next","title":"What's next?","text":"<p>Set up Git remote helper and continue working with your repository.</p> <p>You'll need your wallet credentials. Go to Organization menu - Wallet .</p> <p></p> <p>Scroll down and copy your Git Remote credentials:</p> <p></p> <p>To view the command to clone your repo, click the Clone button on your repo page.</p> <p></p>"},{"location":"working-with-gosh/git-remote-helper/","title":"Git Remote Helper","text":"<p>Git Remote Helper is a <code>git-client helper</code> to interact with remote repositories hosted on the GOSH blockchain.</p>"},{"location":"working-with-gosh/git-remote-helper/#setup-helper-from-source","title":"Setup helper from source","text":"<ol> <li> <p>Prerequisites:</p> <ul> <li>Rust v1.65+</li> <li>Protobuf Compiler</li> <li><code>git</code></li> <li><code>make</code></li> </ul> </li> <li> <p>Clone <code>gosh</code> repository</p> </li> <li><code>cd git-remote-gosh</code> and run <code>make install</code></li> <li>Add path with <code>git-remote-gosh</code> for availability via <code>$PATH</code>:</li> </ol> <pre><code>export PATH=\"&lt;path/to/git-remote-gosh&gt;:$PATH\"\n</code></pre> <p>or use symlink  (e.g. into<code>/usr/local/bin</code>):</p> <pre><code>ln -s /path/to/git-remote-gosh /usr/local/bin/git-remote-gosh\n</code></pre> <p>Run the following command to make sure it's available:</p> <pre><code>which git-remote-gosh\n</code></pre>"},{"location":"working-with-gosh/git-remote-helper/#setup-helper-from-binary-releases","title":"Setup helper from binary releases","text":"<ol> <li> <p>Prerequisites:</p> <ul> <li>wget</li> </ul> </li> <li> <p>Download latest version:</p> <p><code>wget https://github.com/gosh-sh/gosh/releases/latest/download/git-remote-gosh-amd64</code></p> </li> <li> <p>Set executable flag:</p> <p><code>chmod +x git-remote-gosh-amd64</code></p> </li> <li> <p>Copy binary to any searchable path:</p> <p><code>cp git-remote-gosh-amd64 /usr/local/bin/git-remote-gosh</code></p> </li> </ol>"},{"location":"working-with-gosh/git-remote-helper/#setup-user-account","title":"Setup user account","text":"<p>When creating your account in Docker extension or GOSH Web you received a GOSH wallet address and keys.</p> <p>To be able to push to Gosh repositories, you need to set up these credentials for Git Remote Helper.</p> <p>The helper expects that the wallet credentials are in the file <code>~/.gosh/config.json</code> or in the file specified in the environment variable <code>GOSH_CONFIG_PATH</code>:</p> <pre><code>{\n  \"ipfs\": \"https://ipfs.network.gosh.sh\",\n  \"primary-network\": \"goshnet\",\n  \"networks\": {\n    \"goshnet\": {\n      \"user-wallet\": {\n        \"profile\": \"USERNAME\",\n        \"pubkey\": \"655b120c996b4f69c686cb3b769fbdfa0141006ce6a88dc012bf323c30265924\",\n        \"secret\": \"6bdc38c0ecd6f74399f6b8ff2486f0e2abb32fca712caf3e4a47ef4a2634c4e8\"\n      },\n      \"endpoints\": [\"https://network.gosh.sh/\"]\n    }\n  }\n}\n</code></pre>"},{"location":"working-with-gosh/git-remote-helper/#use-gosh-as-remote","title":"Use GOSH as remote","text":"<p>For correct usage of the helper you should refer to remote in the following form:</p> <pre><code>gosh://GOSH_ROOT/REPO_NAME\n</code></pre>"},{"location":"working-with-gosh/git-remote-helper/#set-remote-for-existing-local-repository","title":"Set remote for existing local repository","text":"<pre><code>git remote add origin gosh://0:a6af961f2973bb00fe1d3d6cfee2f2f9c89897719c2887b31ef5ac4fd060638f/my-user-name/my-repo\n</code></pre>"},{"location":"working-with-gosh/git-remote-helper/#clone-repository","title":"Clone repository","text":"<pre><code>git clone gosh://0:a6af961f2973bb00fe1d3d6cfee2f2f9c89897719c2887b31ef5ac4fd060638f/my-user-name/my-repo\n</code></pre>"},{"location":"working-with-gosh/git-remote-helper/#ever-sdk-protocol","title":"Ever SDK protocol","text":"<p>By default, the SDK in Remote Helper uses the WebSocket protocol. If for some reason this does not suit you (for example, you are using Alpine Linux), then set the environment variable <code>GOSH_PROTO</code> to <code>http</code></p> <pre><code>export GOSH_PROTO=http\n</code></pre>"},{"location":"working-with-gosh/gosh-web/","title":"GOSH Web","text":"<p>GOSH Web is also a good way to get started with GOSH.</p> <p>It implements GOSH repository management as a simple web interface.</p> <p>You will be able to create your GOSH account and Decentralized Autonomous Organization (DAO), set up and manage repositories. Repositories stored in GOSH can then be interacted with like any regular remote repository, with a few small configurations to git, making decentralized code management easily available to anyone.</p>"},{"location":"working-with-gosh/gosh-web/#create-account","title":"Create account","text":"<p>To get started with GOSH, you need an active Github-account.</p> <p>Click Create account with Github to start registering on GOSH</p> <p></p> <p>After click Authorize gosh-sh</p> <p></p> <p>Info</p> <p>The special GOSH DAO Bot will help with registration in Gosh. It will deploy your DAO and upload your selected repositories to GOSH.</p> <p>In the list of organizations received from Github, click on the organization</p> <p></p> <p>and select repositories for upload into Gosh.</p> <p></p> <p>Do this for each organization for which you want to upload repositories to Gosh.</p> <p>Danger</p> <p>After registering on GOSH you will not be able to return to this step in this release.</p> <p>This will be available later</p> <p>Then click Upload</p> <p></p> <p>\u200bIf you are familiar with blockchain, you know what to do with a seed phrase.</p> <p>If you're new to blockchain, all you need to know, is that this is the key to your account and all your assets on GOSH. Your public key, which can identify you on the blockchain and the secret key you'll use to sign your actions can always be calculated from your seed phrase.</p> <p>To create the GOSH-account, the seed phrase will be generated for you. If you already have the GOSH-account, click Clear and enter your own one seed phrase.</p> <p></p> <p>Danger</p> <p>Write your seed phrase down and store it somewhere safe, and never share it with anyone. Avoid storing it in plain text or screenshots, or any other non-secure way. If you lose it, you lose access to your assets. Anyone who gets it, gets full access to your assets.</p> <p>Info</p> <p>Your seed phrase will be used to log into GOSH.</p> <p>Once you have written down your seed phrase, click Continue.</p> <p>Then choose a short nickname or create a new one and click Create account.</p> <p>Warning</p> <p>The Usernames must contain only Latin letters, numbers, hyphen, underscore character <code>( a...z, 0...9, -, _ )</code></p> <p></p> <p>Info</p> <p>When the repositories are uploaded, a notification will be sent to your email.</p> <p></p> <p>To log into Gosh, click Sign in.</p> <p>Enter the saved seed phrase and click Sign in.</p> <p></p> <p>GOSH will ask you to set up a PIN code:</p> <p></p> <p>And unlock with PIN code.</p> <p>Once done, you will be logged into GOSH.</p> <p>Info</p> <p>The GOSH DAO Bot will be a member of your organization. In the future, it will track changes in your repositories on Github and synchronize them with Gosh.</p> <p>The Bot can be removed from the DAO members by voting. But then there will be no automatic synchronization of repositories in GOSH if they have been changed in Github.</p>"},{"location":"working-with-gosh/gosh-web/#create-organization","title":"Create Organization","text":"<p>The Organizations page will open after your account is created.</p> <p>Click New organization button in the Organizations section.</p> <p></p> <p>\u200bInput Organization name and members.</p> <p>Warning</p> <p>The Organizations name must contain only Latin letters, numbers, hyphen, underscore character <code>( a...z, 0...9, -, _ )</code></p> <p>The first mandatory member is the creator, identified by their username.</p> <p>The second member is the GOSH DAO Bot. It will synchronize repositories with github on Gosh.</p> <p>Any other members can be added at creation - just enter the username of each member in new line.</p> <p>At any later time the list of members can be expanded by voting.</p> <p>Click Create organization.</p> <p></p> <p>\u200bOnce created, your organization will appear in the organization list. Click on it to continue.</p> <p></p>"},{"location":"working-with-gosh/gosh-web/#create-repository","title":"Create Repository","text":"<p>To create a repository in your organization click New repository in the Repositories section.\u200b</p> <p></p> <p>Enter repository name and click Create repository.</p> <p>Warning</p> <p>The repository name must contain only Latin letters, numbers, hyphen, underscore character <code>( a...z, 0...9, -, _ )</code></p> <p></p>"},{"location":"working-with-gosh/gosh-web/#create-branch","title":"\u200bCreate Branch","text":"<p>Repository is created with default main branch. To create another branch, click on the branches counter.\u200b</p> <p></p> <p>Select the branch to be forked, enter new branch name, and click\u200b Create branch.</p> <p>Warning</p> <p>The branch name must contain only Latin letters, numbers, hyphen, underscore character <code>( a...z, 0...9, -, _ )</code></p> <p></p> <p>Once the branch is created, it will appear in the branches list.</p> <p></p> <p>Switch to it via drop down list.</p> <p></p>"},{"location":"working-with-gosh/gosh-web/#create-file","title":"Create File","text":"<p>To create file, click Add file button.</p> <p></p> <p>Enter file contents and name.</p> <p></p> <p>You can use Preview if needed. MD syntax is supported for preview.</p> <p>Once done, scroll down to Commit data, enter commit info and click Commit changes.\u200b</p> <p></p> <p>Commit status will be displayed below.</p> <p></p> <p>If the branch you are working in requires no voting to confirm commits, the file will be added. Otherwise a DAO vote will be initiated.</p>"},{"location":"working-with-gosh/gosh-web/#create-pull-request","title":"Create Pull Request","text":"<p>Click on the Pull requests tab and set up the pull request: what branch to merge from and to. Once selected, click Compare.</p> <p></p> <p>The branches will be compared. Review the changes, set up the pull request and click Commit changes.</p> <p></p> <p>Info</p> <p>Note: When merging into the main branch, and in some other cases (depending on DAO setup), a DAO proposal will be initiated by trying to commit.</p> <p>Organization Tokens have to be sent to the DAO Soft Majority Vote contract to start a proposal for DAO members to vote on.</p>"},{"location":"working-with-gosh/gosh-web/#voting-in-smv-soft-majority-vote","title":"Voting in SMV (Soft Majority Vote)","text":"<p>Actions that require a DAO vote, such as merging into main, are performed by creating a proposal.</p> <p>To create a proposal, or to vote for a proposal someone else created, some of your tokens need to be allocated to SMV (once the proposal is completed), you can get them back.</p> <p>For example, to merge into main, create a pull request from some other branch. A proposal will be generated and will appear on the Events page.</p> <p></p> <p>Open the proposal and review the contents.</p> <p></p> <p>The voting period is indicated on the proposal page. This is the time allotted for voting. Unless a decisive majority of &gt;50% is achieved early, votes will be counted at the end of this period.</p> <p>The red and green numbers next to Running status indicate how many tokens were used by now to vote for and against the proposal.</p> <p>The green indicator in the top right corner means that the SMV smart contracts are not currently processing any new votes. It turns red when the SMV contracts are busy.</p> <p>Once you have made a decision, select Approve or Reject and click Vote for proposal. Vote registration can take a bit of time.</p> <p>Info</p> <p>As per the rules of Soft Majority Voting, to have a proposal approved early, you need at least 50% of the total supply of tokens in the repository + 1 token used to vote for the proposal.</p> <p>For example, in a repository with two members, where the total supply of tokens is 200, 101 token needs to be used to instantly approve a proposal. Thus with every member holding 100 tokens a proposal can never be instantly completed without the participation of members other than the proposal's author.</p> <p>On the other hand, so as not to depend on all members of an organization to vote, soft majority vote will complete with an approval at the end of the voting period, if 10% of the total token supply were used to vote for, and no one voted against.</p> <p>The more tokens are sent against the proposal, the higher the approving amount needs to be (up to 50% of the total supply  + 1 token) for the proposal to pass.</p> <p>Other members of the Organization, who have transferred their tokens to SMV, will be able to vote for the proposal on this page in their own accounts.</p> <p>Info</p> <p>Currently, even in organizations with a single member, voting still takes place when a proposal is created. 51 tokens are needed to approve a proposal in such a repository.</p> <p>Once a majority has been reached early, or the voting period ended and the soft majority vote result was decided, the proposal completes and the proposed action is performed.</p> <p></p>"},{"location":"working-with-gosh/gosh-web/#view-public-key","title":"View Public Key","text":"<p>A user needs to know their public key, for example, when joining an organization.</p> <p>To view your public key go to the main page of your account and click Settings.</p> <p>Warning</p> <p>Avoid storing your private key and seed phrase in plain text or screenshots, or any other non-secure way. If you lose it, you lose access to your assets. Anyone who gets it, gets full access to your assets.</p>"},{"location":"working-with-gosh/gosh-web/#add-members-to-organization","title":"Add Members to Organization","text":"<p>Go to Organization Settings to the Members tab to manage your organization.</p> <p>To add members, enter their public keys in the field, each from a new line, and click  Add members button.</p>"},{"location":"working-with-gosh/gosh-web/#whats-next","title":"What's next?","text":"<p>Set up Git Remote Helper and continue working with your repository.</p> <p>You'll need your wallet credentials. Go to Organization Settings  - Wallet and copy your Git Remote credentials.</p>"},{"location":"working-with-gosh/verify-images-in-docker-extension/","title":"Verify Images in Docker Extension","text":"<p>Once you have pulled a GOSH image someone else built and uploaded to dockerhub, you can verify, that it was build from the exact code on GOSH that it claims to be built from.</p> <p>To do that, go to Containers Tab in Docker Extension.</p> <p></p> <p>Your containers and their hashes are listed on this tab.</p> <p>Scroll left to see the GOSH repository link it claims to be build from.</p> <p>Click Validate.</p> <p></p> <p>GOSH docker extension will read the hash of the container, rebuild the container from the specified repository, compare resulting hash and report whether the hashes match.</p> <p></p>"}]}